namespace basilcc
{
  // item in first set
  class FirstItem
  {
  public:
    inline explicit FirstItem (SymbolPtr token, Priority const & priority = Priority ())
      : m_token (token), m_priority (priority)
    {}
    ~ FirstItem () {}

    // get token
    inline SymbolPtr getToken () const
    {
      return m_token;
    }

    // get first priority
    inline Priority const & getFirstPriority () const
    {
      return m_priority;
    }

    // update first item priority, max of priority and item priority
    inline void update (Priority const & priority)
    {
      m_priority = maxPriority (m_priority, priority);
    }
  private:
    SymbolPtr m_token;
    Priority m_priority;
  };

  // a < b
  bool firstItemLess (FirstItem const & a, FirstItem const & b)
  {
    return a.getToken () < b.getToken ();
  }
  //  true if first item token
  bool IsFirstItemToken (SymbolPtr token; FirstItem item) const
  {
    return item.getToken () == token;
  }
}

#hdr
#include <basilcc/priority.h>
#include <basilcc/symbol_ptr.h>
#end

#src
#include <basilcc/symbol.h>
#end

