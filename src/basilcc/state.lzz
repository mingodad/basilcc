namespace basilcc
{
  class BasilCC;

  class State
  {
  public:
    State (size_t num, FollowKernelPtr follow_kernel)
      : m_num (num), m_follow_kernel (follow_kernel), m_state_move (0), m_nonterm_shift_sel (0) 
    {}
    ~ State ()
    {}

    // get number
    size_t getNumber () const
    {
      return m_num;
    }

    // get follow kernel
    inline FollowKernelPtr getFollowKernel () const
    {
      return m_follow_kernel;
    }

    // get state move
    inline StateMovePtr getStateMove () const
    {
      return m_state_move;
    }

    // get nonterm shift sel
    inline ShiftSelPtr getNontermShiftSel () const
    {
      return m_nonterm_shift_sel;
    }

    // get lex state
    inline LexState const & getLexState () const
    {
      return m_lex_state;
    }

    // closure, return number of conflicts
    int closure (BasilCC & cc)
    {
      // will be called more than once? 
      return m_state_move ? 0 : stateClosure (cc, m_follow_kernel, m_state_move, m_nonterm_shift_sel, m_lex_state);
    }

  private:
    size_t m_num;
    FollowKernelPtr m_follow_kernel;
    StateMovePtr m_state_move;
    ShiftSelPtr m_nonterm_shift_sel;
    LexState m_lex_state; 
  }
}

#hdr
#include <basilcc/follow_kernel_ptr.h>
#include <basilcc/lex_state.h>
#include <basilcc/shift_sel_ptr.h>
#include <basilcc/state_move_ptr.h>
#end

#src
#include <basilcc/state_closure.h>
#end
