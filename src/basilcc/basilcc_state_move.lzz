namespace basilcc
{
  class StateMove
  {
  public:
    // constructor
    StateMove (int num, MoveSelPtr move_sel, ActionSeqPtr def_action_seq)
      : m_num (num), m_move_sel (move_sel), m_def_action_seq (def_action_seq)
    {}
    ~ StateMove ()
    {}

    // get number
    inline int getNumber () const
    {
      return m_num;
    }

    // get move selection
    inline MoveSelPtr getMoveSel () const
    {
      return m_move_sel;
    }

    // get default action sequence
    inline ActionSeqPtr getDefaultActionSeq () const
    {
      return m_def_action_seq;
    }

    // get action seq for token number
    ActionSeqPtr getActionSeq (int token_num) const
    {
      MovePtrVector const & moves = m_move_sel->getMoves ();
      MovePtrVectorConstIter p = lower_bound (moves.begin (), moves.end (), token_num, moveLessTokenNumber);
      if (p != moves.end ())
      {
        MovePtr move = * p;
        if (moveSameTokenNumber (move, token_num))
        {
          return move->getActionSeq ();
        }
      }
      return m_def_action_seq;
    }

  private:
    int m_num;
    MoveSelPtr m_move_sel;
    ActionSeqPtr m_def_action_seq;
  }
}

using namespace std;

#hdr
#include <basilcc_action_seq_ptr.h>
#include <basilcc_move_sel_ptr.h>
#end

#src
#include <basilcc_move.h>
#include <basilcc_move_sel.h>
#include <algorithm>
#end
