namespace basilcc
{
   class Action
   {
   public:
      inline Action(int num)
         : m_num(num)
      {}
      virtual ~Action()
      {}

      // get action number
      inline int getNumber() const
      {
         return m_num;
      }

      // true if shift
      virtual bool isShift() const = 0;
      // true if reduction
      inline  bool isReduction() const
      {
         return !isShift();
      }
   private:
      // action number
      int m_num;
   };

   class ReduceAction : public Action
   {
   public:
      ReduceAction(int num, RulePtr rule, SymbolPtr shortcut, bool accept)
         : Action(num), m_rule(rule), m_shortcut(shortcut), m_accept(accept)
      {}
      ~ ReduceAction()
      {}

      // true if shift
      bool isShift() const
      {
         return false;
      }

      // get rule
      inline RulePtr getRule() const
      {
         return m_rule;
      }

      // get shortcut
      inline SymbolPtr getShortcut() const
      {
         return m_shortcut;
      }

      // get shortcut number
      int getShortcutNumber() const
      {
         return m_shortcut->getNumber();
      }

      // true if has accept
      bool hasAccept() const
      {
         return m_accept;
      }
   private:
      // reduce on this rule
      RulePtr m_rule;
      // shortcut
      SymbolPtr m_shortcut;
      // true if accept
      bool m_accept;
   };

   // reduce action cast
   ReduceAction const &reduceAction(Action const &action)
   {
      return static_cast<ReduceAction const&>(action);
   }

   class ShiftAction : public Action
   {
   public:
      ShiftAction(int num, StatePtr state)
         : Action(num), m_state(state)
      {}
      ~ ShiftAction()
      {}

      // true if shift
      bool isShift() const
      {
         return true;
      }

      // get state
      inline StatePtr getState() const
      {
         return m_state;
      }
   private:
      // state on shift
      StatePtr m_state;
   };
   // shift action cast 
   ShiftAction const &shiftAction(Action const &action)
   {
      return static_cast<ShiftAction const&>(action);
   }

   // action to string
   std::string actionToString(ActionPtr action)
   {
      std::string str;
      if (action->isShift())
      {
         ShiftAction const &shift_action = shiftAction(*action);
         str = "SHIFT";
         appendWithSpace(str, intToString(shift_action.getState()->getNumber()));
      }
      else
      {
         ReduceAction const &reduce_action = reduceAction(*action);
         RulePtr rule = reduce_action.getRule();
         SymbolPtr shortcut = reduce_action.getShortcut();
         if (rule->isStart())
         {
            str = "DONE";
            appendWithSpace(str, intToString(rule->getNumber()));
         }
         else
         {
            if (reduce_action.hasAccept())
            {
               str = "ACCEPT";
            }
            else
            {
               str = "REDUCE";
            }
            appendWithSpace(str, intToString (rule->getNumber()));
            appendWithSpace(str, shortcut->getName());
         }
      }
      return str;
   }

   // append actions to string
   void appendActions(std::string &str, ActionPtrVector const &actions)
   {
      if (!actions.empty())
      {
         for (ActionPtrVectorConstIter i = actions.begin(), endi = actions.end();;)
         {
            str += actionToString(*i);
            if (++i == endi)
            {
               break;
            }
            str += ", ";
         }
      }
   }
}

#hdr
#include <basilcc_action_ptr_vector.h>
#include <basilcc_rule_ptr.h>
#include <basilcc_state_ptr.h>
#include <basilcc_symbol_ptr.h>
#include <string>
#end

#src
#include <basilcc_rule.h>
#include <basilcc_state.h>
#include <basilcc_symbol.h>
#include <basilcc_util.h>
#end
