namespace basilcc
{
  class BasilCC;

  // make sure we have at least one start rule and all nonterminals are defined
  void checkRules (BasilCC & cc)
  {
    if (! isLeftHandSymbol (cc, getStartSymbol (cc)))
    {
      throw BasilError ("missing start rule");
    }
    RulePtrVector const & rules = getRules (cc);
    for_each (rules.begin (), rules.end (), CheckRule (cc));
  }
}

using namespace basilcc;
using namespace basil;
using namespace std;

namespace
{
  // check rule
  void CheckRule (BasilCC & cc; RulePtr const & rule) const
  {
    // make sure all right hand symbols are defined
    RuleSymbolPtrVector const & right_rule_symbols = rule->getRightRuleSymbols ();
    for_each (right_rule_symbols.begin (), right_rule_symbols.end (), CheckNonTerm (cc));
  }
  // make sure right rule symbol, if nonterminal, is defined (is a left hand symbol on some rule)   
  void CheckNonTerm (BasilCC & cc; RuleSymbolPtr rule_symbol) const
  {
    SymbolPtr symbol = rule_symbol->getSymbol ();
    if (! (symbol->isToken () || isLeftHandSymbol (cc, symbol)))
    {
      throw BasilError (Message (rule_symbol->getLoc (), "non-terminal % not defined") << symbol->getName ());
    }
  }
}

#hdr
#end

#src
#include <basil/error.h>
#include <basil/message.h>
#include <basilcc/basilcc.h>
#include <basilcc/rule.h>
#include <basilcc/rule_api.h>
#include <basilcc/rule_name.h>
#include <basilcc/rule_symbol.h>
#include <basilcc/symbol.h>
#include <basilcc/symbol_api.h>
#include <algorithm>
#include <sstream>
#end
