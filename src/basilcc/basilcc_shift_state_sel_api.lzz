namespace basilcc
{
  class BasilCC;

  // get shift state sel, steals shift_states
  ShiftStateSelPtr getShiftStateSel (BasilCC & cc, ShiftStateVector & shift_states)
  {
    return cc.getTable <ShiftStateSelTable> ().getShiftStateSel (shift_states);
  }

  // get all shift state sels
  ShiftStateSelPtrVector const & getShiftStateSels (BasilCC const & cc)
  {
    return cc.getTable <ShiftStateSelTable> ().getShiftStateSels ();
  }
}

using namespace basilcc;

namespace
{
  // goto could own shift state vector, but then not as straightforward to serialize
  class ShiftStateSelTable : public Table
  {
  public:
    ShiftStateSelTable (BasilCC & cc)
    {}
    ~ ShiftStateSelTable ()
    {
      deleteObjects (m_shift_state_sels.begin (), m_shift_state_sels.end ());
    }

    // get shift state sel
    ShiftStateSelPtr getShiftStateSel (ShiftStateVector & shift_states)
    {
      return * m_shift_state_sels.insert (m_shift_state_sels.end (), new ShiftStateSel (m_shift_state_sels.size (), shift_states));
    }
    inline ShiftStateSelPtrVector const & getShiftStateSels () const
    {
      return m_shift_state_sels;
    }

    enum { TABLE = TABLE_SHIFT_STATE_SEL }
  private:
    ShiftStateSelPtrVector m_shift_state_sels;
  }
}

#hdr
#include <basilcc_shift_state_sel_ptr_vector.h>
#include <basilcc_shift_state_vector.h>
#end

#src
#include <basilcc_basilcc.h>
#include <basilcc_shift_state_sel.h>
#include <basilcc_table.h>
#include <basilcc_util.h>
#end
