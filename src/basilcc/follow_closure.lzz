namespace basilcc
{
  class BasilCC;

  // follow closure
  void followClosure (BasilCC & cc, ShiftBasePtr shift_base, FollowRulePtrVector & follow_rules, FollowShiftList & follow_shifts,
      LazyFollowMovePtr & lazy_follow_move, LexState & lex_state, ConflictPtrVector & conflicts)
  {
    getNonKernelFollowRules (cc, shift_base, follow_rules);
    getFollowShifts (cc, follow_rules, follow_shifts);
    lazy_follow_move = getLazyFollowMove (cc, follow_rules, conflicts);
    lex_state = getLexState (follow_rules, shift_base->getBaseKernel ()->getKernelSize ());
  }
}

using namespace std;
using namespace basilcc;

namespace
{
  // get non kernel follow rules, follow_rules contains just kernel rules
  void getNonKernelFollowRules (BasilCC & cc, ShiftBasePtr shift_base, FollowRulePtrVector & follow_rules)
  {
    int kernel_size = follow_rules.size ();
    ShiftRulePtrVector const & shift_rules = shift_base->getShiftRules ();
    follow_rules.reserve (shift_rules.size ());
    transform (shift_rules.begin () + kernel_size, shift_rules.end (), back_inserter (follow_rules), newFollowRule);
    FollowRulePtrVectorIter non_kernel_follow_rules_beg = follow_rules.begin () + kernel_size;
    FollowBaseClosure (follow_rules, kernel_size).submit ();
    transform (non_kernel_follow_rules_beg, follow_rules.end (), non_kernel_follow_rules_beg, FreezeFollowRule (cc));
  }

  // follow base closure
  struct FollowBaseClosure (FollowRulePtrVector const & follow_rules, int kernel_size)
  {
    // start closure
    void submit ()
    {
      // start with kernel rules
      for (FollowRulePtrVectorConstIter i = follow_rules.begin (), endi = i + kernel_size; i != endi; ++ i)
      {
        FollowRulePtr follow_rule = * i;
        BaseRulePtr base_rule = follow_rule->getShiftRule ()->getBaseRule ();
        if (! base_rule->isReduction ())
        {
          SymbolPtr symbol = base_rule->getNextSymbol ();
          if (! symbol->isToken ())
          {
            auto_ptr <Follow> follow (follow_rule->getNextFollow());
            update (symbol, follow.get());
          }
        }
      }
    }
  private:
    // update follow rules with left hand symbol 
    void update (SymbolPtr symbol, FollowPtr follow)
    {
      // update only non kernel rules
      for (FollowRulePtrVectorConstIter i = follow_rules.begin () + kernel_size, endi = follow_rules.end (); i != endi; ++ i)
      {
        FollowRulePtr follow_rule = * i;
        BaseRulePtr base_rule = follow_rule->getShiftRule ()->getBaseRule ();
        RulePtr rule = base_rule->getRule ();
        if (rule->getLeftSymbol () == symbol)
        {
          if (follow_rule->update (follow) && ! base_rule->isReduction ())
          {
            SymbolPtr symbol = base_rule->getNextSymbol ();
            if (! symbol->isToken ())
            {
              auto_ptr <Follow> follow (follow_rule->getNextFollow ());
              update (symbol, follow.get ());
            }
          }
        }
      }
    }
  }

  // get follow shift set
  void getFollowShifts (BasilCC & cc, FollowRulePtrVector const & follow_rules, FollowShiftList & follow_shifts)
  {
    for (FollowRulePtrVectorConstIter i = follow_rules.begin (), endi = follow_rules.end (); i != endi; ++ i)
    {
      FollowRulePtr follow_rule = * i;
      BaseRulePtr base_rule = follow_rule->getShiftRule ()->getBaseRule ();
      if (! (base_rule->isReduction () || base_rule->getRule ()->canBypass ()))
      {
        SymbolPtr symbol = base_rule->getNextSymbol ();
        if (find_if (follow_shifts.begin (), follow_shifts.end (), IsFollowShiftSymbol (symbol)) == follow_shifts.end ())
        {
          FollowRulePtrVector kernel_rules;
          // only need to search for kernel rules from i
          for_each (i, endi, GetFollowKernelRules (cc, symbol, kernel_rules));
          sort (kernel_rules.begin (), kernel_rules.end (), followRuleLess);
          FollowKernelPtr follow_kernel = getFollowKernel (cc, kernel_rules);
          follow_shifts.push_back (FollowShift (symbol, follow_kernel));
        }
      }
    }
    // sort by symbols
    follow_shifts.sort ();
  }

  // get follow kernel rules
  void GetFollowKernelRules (BasilCC & cc, SymbolPtr symbol, FollowRulePtrVector & kernel_rules; FollowRulePtr follow_rule) const
  {
    BaseRulePtr base_rule = follow_rule->getShiftRule ()->getBaseRule ();
    // make sure not reduction before get next symbol 
    if (! (base_rule->isReduction () || base_rule->getRule ()->canBypass ()) && base_rule->getNextSymbol () == symbol)
    {
      kernel_rules.push_back (getNextFollowRule (cc, follow_rule));
    }
  }

  // get lazy follow move
  LazyFollowMovePtr getLazyFollowMove (BasilCC & cc, FollowRulePtrVector const & follow_rules, ConflictPtrVector & conflicts)
  {
    TempFollowMove temp_follow_move;
    for (FollowRulePtrVectorConstIter i = follow_rules.begin (), endi = follow_rules.end (); i != endi; ++ i)
    {
      FollowRulePtr follow_rule = * i;
      ShiftRulePtr shift_rule = follow_rule->getShiftRule ();
      BaseRulePtr base_rule = shift_rule->getBaseRule ();
      if (base_rule->isReduction ())
      {
        // add reduction (except if rule is bypassed)
        RulePtr rule = base_rule->getRule ();
        if (! rule->canBypass ())
        {
          RuleSymbolPtr left_rule_symbol = rule->getLeftRuleSymbol ();
          Priority priority = left_rule_symbol->getReducePriority ();
          bool sticky = left_rule_symbol->hasSticky ();
          bool accept = left_rule_symbol->hasAccept ();
          FollowPtr follow = follow_rule->getFollow ();
          temp_follow_move.addReduction (rule, follow, priority, sticky, accept);
        }
      }
      else
      {
        // add shift if next symbol is a token
        SymbolPtr symbol = base_rule->getNextSymbol ();
        if (symbol->isToken ())
        {
          Priority priority = base_rule->getShiftPriority () + shift_rule->getShiftPriority ();
          temp_follow_move.addShift (symbol, priority);
        }
      }
    }
    temp_follow_move.freeze ();
    LazyFollowMovePtr lazy_follow_move = temp_follow_move.getLazyFollowMove (cc);
    // getConflicts may take actions so call after getLazyFollowMove
    temp_follow_move.getConflicts (conflicts);
    return lazy_follow_move;
  }

  // update follow lex state
  void UpdateLexState (LexState & lex_state; FollowRulePtr follow_rule) const
  {
    lex_state.update (follow_rule->getLexState ());
  }

  // get follow lex state
  LexState getLexState (FollowRulePtrVector const & follow_rules, int kernel_size)
  {
    // only need to pull lex state from kernel rules
    LexState lex_state;
    for_each (follow_rules.begin (), follow_rules.begin () + kernel_size, UpdateLexState (lex_state));
    return lex_state;
  }
}

#hdr
#include <basilcc/conflict_ptr_vector.h>
#include <basilcc/follow_rule_ptr_vector.h>
#include <basilcc/follow_shift_list.h>
#include <basilcc/lazy_follow_move_ptr.h>
#include <basilcc/lex_state.h>
#include <basilcc/shift_base_ptr.h>
#end

#src
#include <basilcc/base_kernel.h>
#include <basilcc/base_rule.h>
#include <basilcc/follow.h>
#include <basilcc/follow_kernel_api.h>
#include <basilcc/follow_rule.h>
#include <basilcc/follow_rule_api.h>
#include <basilcc/rule.h>
#include <basilcc/rule_symbol.h>
#include <basilcc/shift_base.h>
#include <basilcc/shift_rule.h>
#include <basilcc/symbol.h>
#include <basilcc/temp_action.h>
#include <basilcc/temp_follow_move.h>
#include <basilcc/temp_follow_move_ptr.h>
#include <basilcc/temp_move.h>
#include <algorithm>
#include <memory>
#end
