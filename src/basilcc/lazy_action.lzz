namespace basilcc
{
  class BasilCC;

  // lazy or delayed action
  class LazyAction
  {
  public:
    LazyAction () 
    {}
    virtual ~ LazyAction ()
    {}
    // true if shift
    virtual bool isShift () const
    {
      return false;
    }
    // true if reduction
    inline bool isReduction () const
    {
      return ! isShift ();
    }
    // get action
    virtual ActionPtr getAction (BasilCC & cc, ShiftPtrVector const & token_shifts, SymbolPtr token) const = 0;
  }

  class ShiftLazyAction : public LazyAction
  {
  public:
    ShiftLazyAction () 
    {}
    ~ ShiftLazyAction ()
    {}

    // true if shift
    bool isShift () const
    {
      return true;
    }

    // get action
    ActionPtr getAction (BasilCC & cc, ShiftPtrVector const & token_shifts, SymbolPtr token) const
    {
      // should always get a state
      StatePtr state = getShiftState (token_shifts, token->getNumber ());
      assert (state);
      return getShiftAction (cc, state);
    }
  }

  // reduce
  class ReduceLazyAction : public LazyAction
  {
  public:
    ReduceLazyAction (RulePtr rule, SymbolPtr shortcut, bool accept)
      : m_rule (rule), m_shortcut (shortcut), m_accept (accept)
    {}
    ~ ReduceLazyAction ()
    {}

    // get rule
    inline RulePtr getRule () const
    {
      return m_rule;
    }

    // get shortcut
    inline SymbolPtr getShortcut () const
    {
      return m_shortcut;
    }

    // true if has accept
    inline bool hasAccept () const
    {
      return m_accept;
    }

    // get action
    ActionPtr getAction (BasilCC & cc, ShiftPtrVector const & token_shifts, SymbolPtr token) const
    {
      return getReduceAction (cc, m_rule, m_shortcut, m_accept);
    }
  private:
    RulePtr m_rule;
    SymbolPtr m_shortcut;
    bool m_accept;
  }
}

#hdr
#include <basilcc/action_ptr.h>
#include <basilcc/rule_ptr.h>
#include <basilcc/shift_ptr_vector.h>
#include <basilcc/symbol_ptr.h>
#end

#src
#include <basilcc/action_api.h>
#include <basilcc/shift.h>
#include <basilcc/symbol.h>
#include <algorithm>
#include <assert.h>
#end
