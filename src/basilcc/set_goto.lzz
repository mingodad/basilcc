namespace basilcc
{
  class BasilCC;

  // set goto on noterminals
  void setGoto (BasilCC & cc)
  {
    SymbolPtrVector const & nonterms = getNonTerminals (cc);
    for_each (nonterms.begin (), nonterms.end (), SetGoto (cc));
  }
}

using namespace std;
using namespace basilcc;

namespace
{
  void SetGoto (BasilCC & cc; SymbolPtr symbol) const
  {
    NonTerminal & nonterm = static_cast <NonTerminal &> (* symbol);
    int symbol_num = nonterm.getNumber ();
    ShiftStateVector shift_states;
    ShiftSelPtrVector const & shift_sels = getShiftSels (cc);
    for (ShiftSelPtrVectorConstIter i = shift_sels.begin (); i != shift_sels.end (); ++ i)
    {
      ShiftSelPtr shift_sel = * i;
      if (StatePtr state = shift_sel->getShiftState (symbol_num))
      {
        shift_states.push_back (ShiftState (int (shift_sel->getNumber ()), state));
      }
    }
    // will be empty for start symbol
    if (! shift_states.empty ())
    {
      // find default state, sort by state then find state that occurs most
      sort (shift_states.begin (), shift_states.end (), shiftStateLessState);
      pair <ShiftStateVectorIter, ShiftStateVectorIter> dflt_shift_states = most (shift_states.begin (), shift_states.end (),
          shiftStateSameState);
      StatePtr dflt_state = dflt_shift_states.first->getState ();
      // discard shift states with dflt_state 
      shift_states.erase (dflt_shift_states.first, dflt_shift_states.second);
      // reorder remaining by number
      sort (shift_states.begin (), shift_states.end (), shiftStateLessNumber);
      ShiftStateSelPtr shift_state_sel = getShiftStateSel (cc, shift_states);
      nonterm.setGoto (new Goto (shift_state_sel, dflt_state));
    }
  }
}

#src
#include <basilcc/goto.h>
#include <basilcc/shift.h>
#include <basilcc/shift_sel.h>
#include <basilcc/shift_sel_api.h>
#include <basilcc/shift_state_sel_api.h>
#include <basilcc/state.h>
#include <basilcc/symbol.h>
#include <basilcc/symbol_api.h>
#include <basilcc/util.h>
#include <algorithm>
#end
