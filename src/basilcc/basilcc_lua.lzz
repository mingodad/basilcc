namespace basilcc
{
  class BasilCC;

  // register compiler compiler functions
  void registerCC (lua_State * L, BasilCC & cc)
  {
    lua_newtable (L);
    register_symbol (L, cc);
    register_priority (L);
    lua_pushlightuserdata (L, & cc);
    lua_pushcclosure (L, add_rule, 1);
    lua_setfield (L, -2, "rule"); 
    lua_setglobal (L, "basil");
  }
}

using namespace basilcc;
using namespace basil;
using namespace std;

namespace
{
  // register priority
  char const META_PRIORITY [] = "__priority__";
  void register_priority (lua_State * L)
  {
    luaL_newmetatable (L, META_PRIORITY);
    lua_pushcfunction (L, priority_add);
    lua_setfield (L, -2, "__add");
    lua_pop (L, 1);
    lua_pushcfunction (L, create_priority);
    lua_setfield (L, -2, "priority");
  }

  // priority constructor
  int create_priority (lua_State * L)
  {
    luaL_checktype (L, 1, LUA_TTABLE);
    int count = get_int_element (L, 1, 1);
    int bang = opt_int_field (L, 1, "bang");
    push_priority (L, Priority (count, bang));
    return 1;
  }

  // priority __add operator
  int priority_add (lua_State * L)
  {
    // one or the other might be nil
    Priority p1 = opt_priority (L, 1);
    Priority p2 = opt_priority (L, 2);
    push_priority (L, p1 + p2);
    return 1;
  }

  // push priority on stack
  void push_priority (lua_State * L, Priority const & priority)
  {
    new (lua_newuserdata (L, sizeof (Priority))) Priority (priority);
    luaL_setmetatable (L, META_PRIORITY);
  }

  // get priority
  Priority get_priority (lua_State * L, int idx)
  {
    Priority priority;
    int type = lua_type (L, idx);
    if (type == LUA_TNUMBER)
    {
      int count = lua_tointeger (L, idx);
      priority = Priority (count);
    }
    else
    {
      priority = * static_cast <Priority *> (luaL_checkudata (L, idx, META_PRIORITY));
    }
    return priority;
  }

  // get optional priority
  Priority opt_priority (lua_State * L, int idx, Priority const & def = Priority ())
  {
    return lua_isnoneornil (L, idx) ? def : get_priority (L, idx);
  }

  // get optional priority field
  Priority opt_priority_field (lua_State * L, int idx, char const * name, Priority const & def = Priority ())
  {
    Priority priority = def;
    if (has_field (L, idx, name))
    {
      priority = get_priority (L, -1);
      lua_pop (L, 1);
    }
    return priority;
  }

  // symbol

  // register sybol
  char const META_SYMBOL [] = "__symbol__";
  void register_symbol (lua_State * L, BasilCC & cc)
  {
    luaL_newmetatable (L, META_SYMBOL);
    lua_pop (L, 1);
    lua_pushlightuserdata (L, & cc);
    lua_pushcclosure (L, create_symbol, 1);
    lua_setfield (L, -2, "symbol");
  }

  // symbol constructor
  int create_symbol (lua_State * L)
  {
    BasilCC & cc = * (BasilCC *) lua_touserdata (L, lua_upvalueindex (1));
    luaL_checktype (L, 1, LUA_TTABLE);
    string name = get_string_element (L, 1, 1);
    Loc loc = opt_loc_field (L, 1, "loc");
    Priority rp = opt_priority_field (L, 1, "reduce_priority");
    Priority fp = opt_priority_field (L, 1, "first_priority");
    Priority sp = opt_priority_field (L, 1, "shift_priority");
    int lex_state = opt_int_field (L, 1, "lex_state", LEX_STATE_UNSET);
    bool sticky = opt_bool_field (L, 1, "sticky");
    bool accept = opt_bool_field (L, 1, "accept");
    RuleSymbolPtr rule_symbol = getRuleSymbol (cc, name, loc, rp, fp, sp, lex_state, sticky, accept);
    * (void **) lua_newuserdata (L, sizeof (void *)) = rule_symbol;
    luaL_setmetatable (L, META_SYMBOL);
    return 1;
  }

  // get symbol
  RuleSymbolPtr get_symbol (lua_State * L, BasilCC & cc, int idx)
  {
    RuleSymbolPtr rule_symbol = 0;
    if (lua_type (L, idx) == LUA_TSTRING)
    {
      string name = lua_tostring (L, idx);
      rule_symbol = getRuleSymbol (cc, name);
    }
    else
    {
      rule_symbol = * static_cast <RuleSymbolPtr *> (luaL_checkudata (L, idx, META_SYMBOL));
    }
    return rule_symbol;
  }

  // get symbol feild
  RuleSymbolPtr get_symbol_field (lua_State * L, BasilCC & cc, int idx, char const * name)
  {
    get_field (L, idx, name);
    RuleSymbolPtr rule_symbol = get_symbol (L, cc, -1);
    lua_pop (L, 1);
    return rule_symbol;
  }

  // get optional symbols from field
  void opt_symbols_field (lua_State * L, BasilCC & cc, int idx, char const * name, RuleSymbolPtrVector & rule_symbols)
  {
    if (has_type_field (L, idx, name, LUA_TTABLE))
    {
      lua_pushnil (L);
      while (lua_next (L, -2) != 0)
      {
        rule_symbols.push_back (get_symbol (L, cc, -1));
        lua_pop (L, 1);
      }
      lua_pop (L, 1);
    }
  }

  // add rule to basil cc
  int add_rule (lua_State * L)
  {
    try
    {
      BasilCC & cc = * (BasilCC *) lua_touserdata (L, lua_upvalueindex (1));
      luaL_checktype (L, 1, LUA_TTABLE);
      string node_name = opt_string_element (L, 1, 1);
      RuleSymbolPtr left_rule_symbol = get_symbol_field (L, cc, 1, "left_symbol");
      RuleSymbolPtrVector right_rule_symbols;
      opt_symbols_field (L, cc, 1, "right_symbols", right_rule_symbols);
      RuleSymbolPtrVector explicit_follow;
      opt_symbols_field (L, cc, 1, "explicit_follow", explicit_follow);
      bool no_bypass = opt_bool_field (L, 1, "no_bypass");
      addRule (cc, node_name, left_rule_symbol, right_rule_symbols, explicit_follow, no_bypass);
    }
    catch (exception const & e)
    {
      lua_pushstring (L, e.what ());
      return lua_error (L);
    }
    return 0;
  }

  // get optional loc field
  Loc opt_loc_field (lua_State * L, int idx, char const * name, Loc const & def = Loc ())
  {
    Loc loc = def;
    if (has_field (L, idx, name))
    {
      loc = checkLoc (L, -1);
      lua_pop (L, 1);
    }
    return loc;
  }

  //
  // lua helper functions
  //
  
  bool has_field (lua_State * L, int idx, char const * name, int & type)
  {
    if ((type = lua_getfield (L, idx, name)) == LUA_TNIL)
    {
      lua_pop (L, 1);
      return false;
    }
    return true;
  }

  inline bool has_field (lua_State * L, int idx, char const * name)
  {
    int type;
    return has_field (L, idx, name, type);
  }

  bool has_type_field (lua_State * L, int idx, char const * name, int type)
  {
    int value_type;
    if (! has_field (L, idx, name, value_type))
    {
      return false;
    }
    if (value_type != type)
    {
      lua_pop (L, 1);
      luaL_error (L, "%s is not a %s", name, lua_typename (L, type));;
    }
    return true;
  }

  bool has_element (lua_State * L, int idx, int i, int & type)
  {
    if ((type = lua_geti (L, idx, i)) == LUA_TNIL)
    {
      lua_pop (L, 1);
      return false;
    }
    return true;
  }

  inline bool has_element (lua_State * L, int idx, int i)
  {
    int type;
    return has_element (L, idx, i, type);
  }

  bool has_type_element (lua_State * L, int index, int i, int type)
  {
    int value_type;
    if (! has_element (L, index, i, value_type))
    {
      return false;
    }
    if (value_type != type)
    {
      lua_pop (L, 1);
      luaL_error (L, "%d is not a %s", i, lua_typename (L, type));;
    }
    return true;
  }

  int get_field (lua_State * L, int index, char const * name)
  {
    int type;
    if (! has_field (L, index, name, type))
    {
      luaL_error (L, "missing %s", name);
    }
    return type;
  }

  void get_type_field (lua_State * L, int index, char const * name, int type)
  {
    if (get_field (L, index, name) != type)
    {
      lua_pop (L, 1);
      luaL_error (L, "%s is not a %s", name, lua_typename (L, type));;
    }
  }

  int get_element (lua_State * L, int index, int i)
  {
    int type;
    if (! has_element (L, index, i, type))
    {
      luaL_error (L, "missing %d", i);
    }
    return type;
  }

  void get_type_element (lua_State * L, int index, int i, int type)
  {
    if (get_element (L, index, i) != type)
    {
      lua_pop (L, 1);
      luaL_error (L, "%d is not a %s", i, lua_typename (L, type));;
    }
  }

  string get_string_field (lua_State * L, int idx, char const * name)
  {
    get_type_field (L, idx, name, LUA_TSTRING);
    string str = lua_tostring (L, -1);
    lua_pop (L, 1);
    return str;
  }

  string get_string_element (lua_State * L, int idx, int i)
  {
    get_type_element (L, idx, i, LUA_TSTRING);
    string str = lua_tostring (L, -1);
    lua_pop (L, 1);
    return str;
  }

  string opt_string_element (lua_State * L, int idx, int i, string const & def = string ())
  {
    string str = def;
    if (has_type_element (L, idx, i, LUA_TSTRING))
    {
      str = lua_tostring (L, -1);
      lua_pop (L, 1);
    }
    return str;
  }

  int get_int_element (lua_State * L, int idx, int i)
  {
    get_type_element (L, idx, i, LUA_TNUMBER);
    int value = lua_tointeger (L, -1);
    lua_pop (L, 1);
    return value;
  }

  int opt_int_field (lua_State * L, int idx, char const * name, int def = 0)
  {
    int value = def;
    if (has_type_field (L, idx, name, LUA_TNUMBER))
    {
      value = lua_tointeger (L, -1);
      lua_pop (L, 1);
    }
    return value;
  }

  bool opt_bool_field (lua_State * L, int idx, char const * name, bool def = false)
  {
    bool value = def;
    if (has_type_field (L, idx, name, LUA_TBOOLEAN))
    {
      value = lua_toboolean (L, -1) == 0 ? false : true;
      lua_pop (L, 1);
    }
    return value;
  }
}

#hdr
#include <lua.hpp>
#end

#src
#include <basil/loc_lua.h>
#include <basilcc/basilcc.h>
#include <basilcc/priority.h>
#include <basilcc/rule_api.h>
#include <basilcc/rule_symbol.h>
#include <basilcc/rule_symbol_api.h>
#include <basilcc/symbol.h>
#include <basilcc/util.h>
#include <exception>
#include <sstream>
#end
