namespace basilcc
{
  class BasilCC;

  // register compiler compiler api, just what is needed to add rules
  void registerCC (lua_State * L, BasilCC & cc)
  {
    registerPriority (L);
    registerRuleSymbol (L, cc);
    registerRuleName (L, cc);
    lua_pushlightuserdata (L, & cc);
    lua_pushcclosure (L, add_rule, 1);
    lua_setglobal (L, "addRule");
  }
}

using namespace basilcc;
using namespace basil;
using namespace std;

namespace
{
  char const META_PRIORITY [] = "Priority";
  char const META_RULE_SYMBOL [] = "RuleSymbol";
  char const META_RULE_NAME [] = "RuleName";

  //
  // Priority
  //
  
  void registerPriority (lua_State * L)
  {
    luaL_newmetatable (L, META_PRIORITY);
    lua_pushcfunction (L, priority_add);
    lua_setfield (L, -2, "__add");
    lua_pop (L, 1);
    lua_register (L, "Priority", priority_ctor);
  }
  // Priority (count, bang)
  int priority_ctor (lua_State * L)
  {
    int count = static_cast <int> (luaL_optinteger (L, 1, 0));
    int bang  = static_cast <int> (luaL_optinteger (L, 2, 0));
    pushPriority (L, Priority (count, bang));
    return 1;
  }
  // __add, + operator
  int priority_add (lua_State * L)
  {
    // one or the other might be nil, in which case default it 
    Priority p1 = optPriority (L, 1, Priority ());
    Priority p2 = optPriority (L, 2, Priority ());
    pushPriority (L, p1 + p2);
    return 1;
  }

  // push priority on stack
  void pushPriority (lua_State * L, basilcc::Priority const & priority)
  {
    new (lua_newuserdata (L, sizeof (Priority))) Priority (priority);
    luaL_setmetatable (L, META_PRIORITY);
  }

  // get priority at arg with default 
  Priority const & optPriority (lua_State * L, int arg, Priority const & def)
  {
    return lua_isnoneornil (L, arg) ? def : * static_cast <Priority *> (luaL_checkudata (L, arg, META_PRIORITY));
  }

  //
  // Symbol (RuleSymbol)
  //

  void registerRuleSymbol (lua_State * L, BasilCC & cc)
  {
    // metatable
    luaL_newmetatable (L, META_RULE_SYMBOL);
    lua_pop (L, 1);
    lua_pushlightuserdata (L, & cc);
    lua_pushcclosure (L, rulesymbol_ctor, 1);
    // to lua this is just a symbol 
    lua_setglobal (L, "Symbol");
  }

  // Symbol (name, loc, reduce_priority, first_priority, shift_priority, lex_state, sticky, accept)
  int rulesymbol_ctor (lua_State * L)
  {
    BasilCC & cc = * (BasilCC *) lua_touserdata (L, lua_upvalueindex (1));
    char const * name = luaL_checkstring (L, 1);
    name = cc.intern (name);
    Loc loc = optLoc (L, 2);
    Priority rp = optPriority (L, 3, Priority ());
    Priority fp = optPriority (L, 4, Priority ());
    Priority sp = optPriority (L, 5, Priority ());
    LexState lex_state (static_cast <int> (luaL_optinteger (L, 6, LEX_STATE_UNSET)));
    bool sticky = lua_toboolean (L, 7) != 0; 
    bool accept = lua_toboolean (L, 8) != 0;
    SymbolPtr symbol = getSymbol (cc, name);
    RuleSymbolPtr rule_symbol = getRuleSymbol (cc, symbol, loc, rp, fp, sp, lex_state, sticky, accept);
    * (void **) lua_newuserdata (L, sizeof (void *)) = rule_symbol;
    luaL_setmetatable (L, META_RULE_SYMBOL);
    return 1;
  }

  // check rule symbol at arg
  RuleSymbolPtr checkRuleSymbol (lua_State * L, int arg)
  {
    return * static_cast <RuleSymbolPtr *> (luaL_checkudata (L, arg, META_RULE_SYMBOL));
  }

  // get options rule symbols at arg
  void optRuleSymbols (lua_State * L, int arg, RuleSymbolPtrVector & rule_symbols)
  {
    if (! lua_isnoneornil (L, arg))
    {
      luaL_checktype (L, arg, LUA_TTABLE);
      lua_pushnil (L);
      while (lua_next (L, arg) != 0)
      {
        rule_symbols.push_back (checkRuleSymbol (L, -1));
        lua_pop (L, 1);
      }
    }
  }

  //
  // RuleName
  //

  void registerRuleName (lua_State * L, BasilCC & cc)
  {
    luaL_newmetatable (L, META_RULE_NAME);
    lua_pop (L, 1);
    lua_pushlightuserdata (L, & cc);
    lua_pushcclosure (L, rulename_ctor, 1);
    // to lua this is just a name 
    lua_setglobal (L, "Name");
  }

  // Name (name, loc, is_node)
  int rulename_ctor (lua_State * L)
  {
    BasilCC & cc = * (BasilCC *) lua_touserdata (L, lua_upvalueindex (1));
    char const * name = luaL_checkstring (L, 1);
    name = cc.intern (name);
    Loc loc = optLoc (L, 2);
    bool is_node = lua_toboolean (L, 3) != 0;
    RuleNamePtr rule_name = getRuleName (cc, name, loc, is_node);
    * (void **) lua_newuserdata (L, sizeof (void *)) = rule_name;
    luaL_setmetatable (L, META_RULE_NAME);
    return 1;
  }

  // if arg nil or none return 0, otherwise return rule name
  RuleNamePtr optRuleName (lua_State * L, int arg)
  {
    return lua_isnoneornil (L, arg) ? 0 : * static_cast <RuleNamePtr *> (luaL_checkudata (L, arg, META_RULE_NAME));
  }


  // addRule (name, left_rule_symbol, right_rule_symbols, explicit_follow, no_bypass)
  int add_rule (lua_State * L)
  {
    static string errmsg;
    {
      // addRule can throw exceptions
      try
      {
        BasilCC & cc = * (BasilCC *) lua_touserdata (L, lua_upvalueindex (1));
        RuleNamePtr rule_name = optRuleName (L, 1);
        RuleSymbolPtr left_rule_symbol = checkRuleSymbol (L, 2);
        RuleSymbolPtrVector right_rule_symbols;
        optRuleSymbols (L, 3, right_rule_symbols);
        RuleSymbolPtrVector explicit_follow;
        optRuleSymbols (L, 4, explicit_follow);
        bool no_bypass = lua_toboolean (L, 5) != 0;
        addRule (cc, rule_name, left_rule_symbol, right_rule_symbols, explicit_follow, no_bypass);
        return 0;
      }
      catch (exception const & e)
      {
        errmsg = e.what ();
      }
    }
    return luaL_error (L, errmsg.c_str ());
  }
}

#hdr
#include <lua.hpp>
#end

#src
#include <basil/loc_lua.h>
#include <basilcc/basilcc.h>
#include <basilcc/priority.h>
#include <basilcc/rule_api.h>
#include <basilcc/rule_name.h>
#include <basilcc/rule_name_api.h>
#include <basilcc/rule_symbol.h>
#include <basilcc/rule_symbol_api.h>
#include <basilcc/symbol.h>
#include <basilcc/symbol_api.h>
#include <basilcc/util.h>
#include <exception>
#include <sstream>
#end
