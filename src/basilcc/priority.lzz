namespace basilcc
{
  // shift, reduce or first priority
  class Priority
  {
  public:
    inline Priority (int count = 0, int bang = 0)
      : m_count (count), m_bang (bang)
    {}

    // get count
    inline int getCount () const
    {
      return m_count;
    }

    // get bang
    inline int getBang () const
    {
      return m_bang;
    }

    // true if greater than zero
    inline bool isSet () const
    {
      return m_count > 0;
    }

    // operator +=
    Priority & operator += (Priority const & p)
    {
      m_count += p.getCount ();
      m_bang  += p.getBang ();
      return * this;
    }

    // priority as string
    std::string toString (char cnt_ch) const
    {
      string str;
      int count = m_count;
      int bang  = m_bang;
      int n = min (count, bang);
      if (n > 2)
      {
        str += '(';
        str += cnt_ch;
        str += "!)";
        str += intToString (n);
        count -= n;
        bang -= n;
      }
      if (count > 2)
      {
        str += '(';
        str += cnt_ch;
        str += ')';
        str += intToString (count);
        count = 0;
      }
      if (bang > 2)
      {
        str += "(!)";
        str += intToString (bang);
        bang = 0;
      }
      for (; count > 0; -- count)
      {
        str += cnt_ch;
      }
      for (; bang > 0; -- bang)
      {
        str += '!';
      }
      return str;
    }

  private:
    int m_count;
    int m_bang;
  }

  // a == b
  inline bool operator == (Priority const & a, Priority const & b)
  {
    return a.getCount () == b.getCount () && a.getBang () == b.getBang ();
  }
  // a != b
  inline bool operator != (Priority const & a, Priority const & b)
  {
    return ! (a == b);
  }
  // a < b
  inline bool operator < (Priority const & a, Priority const & b)
  {
    return a.getCount () < b.getCount () || a.getBang () < b.getBang ();
  }
  // a + b
  inline Priority operator + (Priority const & a, Priority const & b)
  {
    return Priority (a.getCount () + b.getCount (), a.getBang () + b.getBang ());
  }
  // max (a, b)
  Priority maxPriority (Priority const & a, Priority const & b)
  {
    return Priority (std::max (a.getCount (), b.getCount ()), std::max (a.getBang (), b.getBang ()));
  }

  // shift priority to string
  std::string shiftPriorityToString (Priority const & p)
  {
    return p.toString ('>');
  }

  // first priority to string
  std::string firstPriorityToString (Priority const & p)
  {
    return p.toString ('^');
  }

  // reduce priority to string
  std::string reducePriorityToString (Priority const & p)
  {
    return p.toString ('+');
  }
}

using namespace std;

#hdr
#include <string>
#end

#src
#include <basilcc/util.h> 
#include <algorithm>
#end
