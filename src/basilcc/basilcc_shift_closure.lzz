namespace basilcc
{
  class BasilCC;

  // shift closure, adds non-kernel shift rules
  void shiftClosure (BasilCC & cc, ShiftRulePtrVector & shift_rules)
  {
    getNonKernelShiftRuleSet (cc, shift_rules);
  }
}

using namespace basilcc;
using namespace std;

namespace
{
  // get non kernel shift rule set from kernel rule set
  void getNonKernelShiftRuleSet (BasilCC & cc, ShiftRulePtrVector & shift_rules)
  {
    ShiftSymbolVector shift_symbols;
    for_each (shift_rules.begin (), shift_rules.end (), UpdateShiftSymbol (shift_symbols));
    int kernel_size = shift_rules.size ();
    for_each (shift_symbols.begin (), shift_symbols.end (), UpdateShiftRules (shift_rules, kernel_size));
    ShiftRulePtrVectorIter non_kernel_shift_rules_beg = shift_rules.begin () + kernel_size;
    transform (non_kernel_shift_rules_beg, shift_rules.end (), non_kernel_shift_rules_beg, FreezeShiftRule (cc));
  }

  // symbol with a priority
  class ShiftSymbol
  {
  public:
    ShiftSymbol (SymbolPtr symbol, Priority const & priority)
      : m_symbol (symbol), m_priority (priority)
    {}
    ~ ShiftSymbol () {}
    inline SymbolPtr getSymbol () const
    {
      return m_symbol;
    }
    inline Priority const & getPriority () const
    {
      return m_priority;
    }
    // update priority
    void update (Priority const & priority)
    {
      m_priority = max_priority (m_priority, priority);
    }
  private:
    SymbolPtr m_symbol;
    Priority m_priority;
  }
  typedef std::vector <ShiftSymbol> ShiftSymbolVector;
  typedef std::vector <ShiftSymbol>::iterator ShiftSymbolVectorIter;
  typedef std::vector <ShiftSymbol>::const_iterator ShiftSymbolVectorConstIter;

  // true if shift symbol has symbol
  inline bool HasSymbol (SymbolPtr symbol; ShiftSymbol const & shift_symbol) const
  {
    return shift_symbol.getSymbol () == symbol;
  }

  // update or add new shift symbol to shift symbols
  void UpdateShiftSymbol (ShiftSymbolVector & shift_symbols; ShiftRulePtr shift_rule) const
  {
    BaseRulePtr base_rule = shift_rule->getBaseRule ();
    if (! base_rule->isReduction ())
    {
      SymbolPtr symbol = base_rule->getNextSymbol ();
      if (! symbol->isToken ())
      {
        Priority priority = shift_rule->getShiftPriority () + base_rule->getShiftPriority ();
        ShiftSymbolVectorIter j = std::find_if (shift_symbols.begin (), shift_symbols.end (), HasSymbol (symbol));
        if (j == shift_symbols.end ())
        {
          shift_symbols.push_back (ShiftSymbol (symbol, priority));
        }
        else
        {
          (* j).update (priority); 
        }
      }
    }
  }

  // update shift rule
  void UpdateShiftRule (ShiftRulePtrVector & shift_rules, int kernel_size, Priority const & shift_priority; ShiftRulePtr shift_rule) const
  {
    BaseRulePtr base_rule = shift_rule->getBaseRule ();
    Priority priority = shift_rule->getShiftPriority () + shift_priority;
    ShiftRulePtrVectorIter i = std::find_if (shift_rules.begin () + kernel_size, shift_rules.end (), HasBaseRule (base_rule));
    if (i == shift_rules.end ())
    {
      shift_rules.push_back (new ShiftRule (base_rule, priority));
    }
    else
    {
      (* i)->update (priority);
    }
  }

  // functor: update shift rule set
  void UpdateShiftRules (ShiftRulePtrVector & shift_rules, int kernel_size; ShiftSymbol const & shift_symbol) const
  {
    ShiftRulePtrVector const & first_shift_rules = shift_symbol.getSymbol ()->getFirst ().getShiftRules ();
    Priority const & shift_priority = shift_symbol.getPriority ();
    std::for_each (first_shift_rules.begin (), first_shift_rules.end (), UpdateShiftRule (shift_rules, kernel_size, shift_priority));
  }
}

#hdr
#include <basilcc_shift_rule_ptr_vector.h>
#end

#src
#include <basilcc_base_rule.h>
#include <basilcc_shift_rule.h>
#include <basilcc_shift_rule_api.h>
#include <basilcc_symbol.h>
#include <algorithm>
#end
