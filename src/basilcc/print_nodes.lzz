namespace basilcc
{
  class BasilCC;

  // print lua node classes  
  void printNodes (BasilCC const & cc, std::string const & filename)
  {
    ofstream os (filename.c_str (), ios_base::out);
    if (! os)
    {
      throw runtime_error (Message ("unable to open file: %") << filename);
    }
    char const * module = "nodes";
    // create the nodes table
    os << "local " << module << " = {}" << '\n';
    os << '\n';
    // define the nodes
    NodePtrVector const & nodes = getNodes (cc);
    for_each (nodes.begin (), nodes.end (), PrintNode (module, os));
    os << "return nodes" << endl;
  }
}

using namespace basilcc;
using namespace basil;
using namespace std;

namespace
{
  // print node
  void PrintNode (char const * module, ostream & os; NodePtr node) const
  {
    char const * name = node->getName ();
    os << "--" << '\n';
    os << "local " << name << " = node (\"" << name << "\")" << '\n';
    // accept function
    os << "function " << name << ":accept (visitor)" << '\n';
    os << "   return visitor:on" << name << " (self)" << '\n';
    os << "end" << '\n';
    os << module << '.' << name << " = " << name << '\n'; 
    os << '\n';
  }
}

#hdr
#include <string>
#end

#src
#include <basil/message.h>
#include <basilcc/node.h>
#include <basilcc/rule.h>
#include <basilcc/rule_api.h>
#include <basilcc/rule_symbol.h>
#include <algorithm>
#include <fstream>
#include <sstream>
#include <stdexcept>
#end
