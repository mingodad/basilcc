namespace basilcc
{
  class ShiftRule
  {
  public:
    ShiftRule (BaseRulePtr base_rule, Priority const & sp)
      : m_base_rule (base_rule), m_sp (sp)
    {}
    ~ ShiftRule ()
    {}

    // get base rule
    inline BaseRulePtr getBaseRule () const
    {
      return m_base_rule;
    }

    // additional shift priority
    Priority getShiftPriority () const
    {
      return m_sp;
    }

    // update shift priority, will keep max
    void update (Priority const & sp)
    {
      m_sp = max_priority (m_sp, sp);
    }

    // to string
    std::string toString() const
    {
      std::string str;
      if (m_sp.is_set())
      {
        str = shift_priority_to_string(m_sp);
      }
      appendWithSpace(str, m_base_rule->toString());
      return str;
    }

  private:
    BaseRulePtr m_base_rule;
    Priority m_sp;
  }

  // a < b
  bool operator < (ShiftRule const & a, ShiftRule const & b)
  {
    return baseRuleLess (a.getBaseRule (), b.getBaseRule ());
  }
  bool shiftRuleLess (ShiftRulePtr a, ShiftRulePtr b)
  {
    return * a < * b;
  }

  // true if shift rule has base rule
  bool HasBaseRule (BaseRulePtr base_rule; ShiftRulePtr shift_rule) const
  {
    return shift_rule->getBaseRule () == base_rule;
  }

  // get base rule from shift rule
  BaseRulePtr getShiftBaseRule (ShiftRulePtr shift_rule)
  {
    return shift_rule->getBaseRule ();
  }
}

using namespace std;

#hdr
#include <basilcc_base_rule_ptr.h>
#include <basilcc_priority.h>
#include <basilcc_shift_rule_ptr.h>
#include <string>
#end

#src
#include <basilcc_base_rule.h>
#include <basilcc_rule.h>
#include <basilcc_util.h>
#end
