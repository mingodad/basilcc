namespace basilcc
{
  class Move
  {
  public:
    Move (int num, SymbolPtr token, ActionSeqPtr action_seq)
      : m_num (num), m_token (token), m_action_seq (action_seq)
    {}
    ~ Move ()
    {}

    // get move number
    inline int getNumber () const
    {
      return m_num;
    }

    // get token
    inline SymbolPtr getToken () const
    {
      return m_token;
    }

    // get simple action seq
    inline ActionSeqPtr getActionSeq () const
    {
      return m_action_seq;
    }

    // to string
    std::string toString () const
    {
      string str = m_token->getName ();
      str += " - ";
      ActionPtrVector const & actions = m_action_seq->getActions ();
      appendActions (str, actions);
      return str;
    }

  private:
    int m_num;
    SymbolPtr m_token;
    ActionSeqPtr m_action_seq;
  }

  // less token number
  bool moveLessTokenNumber (MovePtr move, int token_num)
  {
    return move->getToken ()->getNumber () <  token_num;
  }

  // true if move has same token number
  bool moveSameTokenNumber (MovePtr move, int token_num)
  {
    return move->getToken ()->getNumber () == token_num;
  }
}

using namespace std;

#hdr
#include <basilcc/action_seq_ptr.h>
#include <basilcc/move_ptr.h>
#include <basilcc/symbol_ptr.h>
#include <string>
#end

#src
#include <basilcc/action.h>
#include <basilcc/action_seq.h>
#include <basilcc/symbol.h>
#end
