namespace basilcc
{
  // symbol first set
  class First
  {
  public:
    First ()
      : m_null (false)
    {}
    ~ First () {}

    // set null
    void setNull ()
    {
      m_null = true;
    }

    // update lex state
    void update (LexState const & lex_state)
    {
      m_lex_state.update (lex_state);
    }

    // update first item
    void update (SymbolPtr token, Priority const & shift_priority)
    {
      FirstItemVectorIter i = std::find_if (m_first_items.begin (), m_first_items.end (), IsFirstItemToken (token));
      if (i == m_first_items.end ())
      {
        m_first_items.push_back (FirstItem (token, shift_priority));
      }
      else
      {
        (* i).update (shift_priority);
      }
    }

    // freeze, no more first items
    void freeze ()
    {
      std::sort (m_first_items.begin (), m_first_items.end (), firstItemLess);
    }

    // true if has null
    inline bool hasNull () const
    {
      return m_null;
    }

    // get lex state
    inline LexState const & getLexState () const
    {
      return m_lex_state;
    }

    // get first items
    inline FirstItemVector const & getFirstItems () const
    {
      return m_first_items;
    }

    // set shift rules, will steal shift rules
    inline void setShiftRules (ShiftRulePtrVector & shift_rules)
    {
      m_shift_rules.swap (shift_rules);
    }

    // get shift rules
    inline ShiftRulePtrVector const & getShiftRules () const
    {
      return m_shift_rules;
    }
  private:
    // first items, instead of vector faster to use item set?
    FirstItemVector m_first_items;
    // true if first has null
    bool m_null;
    // lex state
    LexState m_lex_state;
    // shift rules
    ShiftRulePtrVector m_shift_rules;
  };
}

#hdr
#include <basilcc_first_item_vector.h>
#include <basilcc_lex_state.h>
#include <basilcc_shift_rule_ptr_vector.h>
#end

#src
#include <basilcc_shift_rule.h>
#include <algorithm>
#end
