namespace basilcc
{
  class BasilCC;

  // lazy or delayed action seq
  class LazyActionSeq
  {
  public:
    LazyActionSeq (LazyActionPtrVector const & lazy_actions)
      : m_lazy_actions (lazy_actions)
    {}
    ~ LazyActionSeq ()
    {}

    // get lazy actions
    inline LazyActionPtrVector const & getLazyActions () const
    {
      return m_lazy_actions;
    }

    // get action seq
    ActionSeqPtr getActionSeq (BasilCC & cc, ShiftPtrVector const & token_shifts, SymbolPtr token) const
    {
      ActionPtrVector actions;
      actions.reserve (m_lazy_actions.size ());
      transform (m_lazy_actions.begin (), m_lazy_actions.end (), back_inserter (actions), GetAction (cc, token_shifts, token));
      return basilcc::getActionSeq (cc, actions);
    }

  private:
    LazyActionPtrVector m_lazy_actions;
  }
}

using namespace std;
using namespace basilcc;

namespace
{
  // get action from forward action
  inline ActionPtr GetAction (BasilCC & cc, ShiftPtrVector const & token_shifts, SymbolPtr token; LazyActionPtr lazy_action) const
  {
    return lazy_action->getAction (cc, token_shifts, token);
  }
}

#hdr
#include <basilcc_action_seq_ptr.h>
#include <basilcc_lazy_action_ptr_vector.h>
#include <basilcc_shift_ptr_vector.h>
#include <basilcc_symbol_ptr.h>
#end

#src
#include <basilcc_action.h>
#include <basilcc_action_seq_api.h>
#include <basilcc_lazy_action.h>
#include <algorithm>
#end
