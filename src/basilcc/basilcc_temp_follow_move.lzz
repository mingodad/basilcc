namespace basilcc
{
  class BasilCC;

  class TempFollowMove
  {
  public:
    TempFollowMove () {}
    ~ TempFollowMove ()
    {
      deleteObjects (m_temp_moves.begin (), m_temp_moves.end ());
    }

    // get temp moves
    inline TempMovePtrVector const & getTempMoves () const
    {
      return m_temp_moves;
    }

    // add reduction
    void addReduction (RulePtr rule, FollowPtr follow, Priority const & priority, bool sticky, bool accept)
    {
      // add each follow item
      FollowItemPtrList const & follow_items = follow->getFollowItems ();
      for (FollowItemPtrListConstIter i = follow_items.begin (); i != follow_items.end (); ++ i)
      {
        FollowItemPtr follow_item = * i;
        TempMovePtr temp_move = getTempMove (follow_item->getToken ());
        temp_move->addReduction (rule, follow_item->getShortcut (), follow_item->getReducePriority () + priority,
            follow_item->hasSticky () || sticky, follow_item->hasAccept () || accept);
      }
    }

    // add shift
    void addShift (SymbolPtr term, Priority const & priority)
    {
      // add shift to priority action
      TempMovePtr temp_move = getTempMove (term);
      temp_move->addShift (priority);
    }

    // freeze, no more changes to moves
    void freeze ()
    {
      // freeze temp moves (sort and trim)
      for (TempMovePtrVectorConstIter i = m_temp_moves.begin (), endi = m_temp_moves.end (); i != endi; ++ i)
      {
        (* i)->freeze ();
      }
    }

    // return lazy follow move
    LazyFollowMovePtr getLazyFollowMove (BasilCC & cc) const
    {
      // get the default move
      TempMovePtr def_temp_move = 0;
      TempMovePtrVector local_temp_moves (m_temp_moves);
      // todo: option for no default action
      /*
      if (! getOptionValue (opt_no_default_action))
      */
      {
        // partition so that ones that can be default are at end
        TempMovePtrVectorIter p = partition (local_temp_moves.begin (), local_temp_moves.end (), tempMoveCanNotBeDefault);
        if (p != local_temp_moves.end ())
        {
          // got some, sort just those and find one that occurs the most
          sort (p, local_temp_moves.end (), tempMoveDefaultLess);
          pair <TempMovePtrVectorIter, TempMovePtrVectorIter> def_temp_moves = most (p, local_temp_moves.end (), tempMoveDefaultSame);
          def_temp_move = * def_temp_moves.first;
          // and discard them
          local_temp_moves.erase (def_temp_moves.first, def_temp_moves.second);
        }
      }
      // get lazy moves
      LazyMovePtrVector lazy_moves;
      for (TempMovePtrVectorConstIter i = local_temp_moves.begin (); i != local_temp_moves.end (); ++ i)
      {
        lazy_moves.push_back ((* i)->getLazyMove (cc));
      }
      // sort lazy moves then get lazy move sel
      sort (lazy_moves.begin (), lazy_moves.end (), lazyMoveLess);
      LazyMoveSelPtr lazy_move_sel = getLazyMoveSel (cc, lazy_moves);
      // get default lazy action seq
      LazyActionSeqPtr def_lazy_action_seq;
      if (def_temp_move)
      {
        // get lazy action seq from default priority move
        def_lazy_action_seq = def_temp_move->getLazyActionSeq (cc);
      }
      else
      {
        // get empty saction list
        LazyActionPtrVector lazy_actions;
        def_lazy_action_seq = getLazyActionSeq (cc, lazy_actions);
      }
      // return lazy follow move from table
      return basilcc::getLazyFollowMove (cc, lazy_move_sel, def_lazy_action_seq);
    }

    // get conflicts, may take actions, so make sure is called after getLazyFollowMove
    void getConflicts (ConflictPtrVector & conflicts)
    {
      for_each (m_temp_moves.begin (), m_temp_moves.end (), GetConflicts (conflicts));
    }

  private:
    // get temp_move for token, create if doesn't exist
    TempMovePtr getTempMove (SymbolPtr token)
    {
      // search for term move
      for (TempMovePtrVectorConstIter i = m_temp_moves.begin (); i != m_temp_moves.end (); ++ i)
      {
        TempMovePtr temp_move = * i;
        if (temp_move->getToken () == token)
        {
          return temp_move;
        }
      }
      TempMovePtr temp_move = new TempMove (token);
      m_temp_moves.push_back (temp_move);
      return temp_move;
    }

  private:
    // priority move set
    TempMovePtrVector m_temp_moves;
  }
}

using namespace std;

#hdr
#include <basilcc_conflict_ptr_vector.h>
#include <basilcc_follow_ptr.h>
#include <basilcc_lazy_follow_move_ptr.h>
#include <basilcc_priority.h>
#include <basilcc_rule_ptr.h>
#include <basilcc_symbol_ptr.h>
#include <basilcc_temp_follow_move_ptr.h>
#include <basilcc_temp_move_ptr_vector.h>
#end

#src
#include <basilcc_first.h>
#include <basilcc_follow.h>
#include <basilcc_follow_item.h>
#include <basilcc_lazy_action_seq_api.h>
#include <basilcc_lazy_follow_move_api.h>
#include <basilcc_lazy_move.h>
#include <basilcc_lazy_move_sel_api.h>
#include <basilcc_symbol.h>
#include <basilcc_temp_move.h>
#include <basilcc_util.h>
#include <algorithm>
#end
