namespace basilcc
{
   class BasilCC;

   class Follow
   {
   public:
      Follow()
      {}
      ~Follow()
      {
         // if items are not frozen then follow is responsible for deleting them
         if (!m_frozen)
         {
            deleteObjects(m_follow_items.begin(), m_follow_items.end());
         }
      }

      // get follow item set
      inline FollowItemPtrList const &getFollowItems() const
      {
         return m_follow_items;
      }

      // get lex state
      inline LexState const &getLexState() const
      {
         return m_lex_state;
      }

      // update, return true if changed
      bool update(FollowPtr follow)
      {
         bool changed = false;
         FollowItemPtrList const &follow_items = follow->getFollowItems();
         FollowItemPtrListIter j = m_follow_items.begin();
         for (FollowItemPtrListConstIter i = follow_items.begin(), endi = follow_items.end(); i != endi; ++i, ++j)
         {
            FollowItemPtr item = *i;
            std::pair<FollowItemPtrListIter, bool> r = insertItem(m_follow_items, j, item->getToken(), item->getShortcut());
            j = r.first;
            if ((*j)->update(item->getReducePriority(), item->hasSticky(), item->hasAccept()) || r.second)
            {
               changed = true;
            }
         }
         if (m_lex_state.update(follow->getLexState()))
         {
            changed = true;
         }
         return changed;
      }
    
      // add follow with shortcut
      void addFollow(FollowPtr follow, SymbolPtr shortcut, Priority const &rp, bool sticky, bool accept)
      {
         FollowItemPtrList const &follow_items = follow->getFollowItems();
         FollowItemPtrListIter j = m_follow_items.begin();
         for (FollowItemPtrListConstIter i = follow_items.begin(), endi = follow_items.end(); i != endi; ++i, ++j)
         {
            FollowItemPtr item = *i;
            j = insertItem(m_follow_items, j, item->getToken(), shortcut).first;
            (*j)->update(rp + item->getReducePriority(), sticky, accept);
         }
         m_lex_state.update(follow->getLexState());
      }

      // add follow w/o shortcut
      void addFollow(FollowPtr follow, Priority const &rp, bool sticky, bool accept)
      {
         FollowItemPtrList const &follow_items = follow->getFollowItems();
         FollowItemPtrListIter j = m_follow_items.begin();
         for (FollowItemPtrListConstIter i = follow_items.begin(), endi = follow_items.end(); i != endi; ++i, ++j)
         {
            FollowItemPtr item = *i;
            j = insertItem(m_follow_items, j, item->getToken(), item->getShortcut()).first;
            (*j)->update(rp + item->getReducePriority(), sticky || item->hasSticky(), accept || item->hasAccept());
         }
         m_lex_state.update(follow->getLexState());
      }

      // add first
      void addFirst(First const &first, LexState const &lex_state, SymbolPtr shortcut, Priority const &rp, bool sticky, bool accept)
      {
         FirstItemVector const &first_items = first.getFirstItems();
         FollowItemPtrListIter j = m_follow_items.begin();
         for (FirstItemVectorConstIter i = first_items.begin(), endi = first_items.end(); i != endi; ++i, ++j)
         {
            FirstItem const &item = *i;
            j = insertItem(m_follow_items, j, item.getToken(), shortcut).first;
            (*j)->update(rp + item.getFirstPriority(), sticky, accept);
         }
         m_lex_state.update(lex_state);
         m_lex_state.update(first.getLexState());
      }

      // freeze follow items, no more changes
      void freeze(BasilCC &cc)
      {
         transform(m_follow_items.begin(), m_follow_items.end(), m_follow_items.begin(), FreezeFollowItem(cc));
         m_frozen = true;
      }

      // to string, to cut down on clutter suppress shortcut if equal to left hand symbol in rule
      std::string toString(SymbolPtr left_symbol)
      {
         std::string items_str;
         if (m_lex_state.isSet ())
         {
            items_str = m_lex_state.toString();
         }
         std::for_each(m_follow_items.begin(), m_follow_items.end(), AppendFollowItem(items_str, left_symbol));
         std::string str = "[";
         str += items_str;
         str += ']';
         return str;
      }

   private:
      // follow item list so easy to insert in sorted order
      FollowItemPtrList m_follow_items;
      // lex state
      LexState m_lex_state;
      // true if follow items are frozen
      bool m_frozen;
   }
}

using namespace basilcc;

namespace
{
   // helper function, insert new item, token and shortcut, in items from j, return position and true if inserted
   std::pair<FollowItemPtrListIter, bool> insertItem(FollowItemPtrList &items, FollowItemPtrListIter j, SymbolPtr token, SymbolPtr shortcut)
   {
      bool added = false;
      while (j != items.end() && followItemLess(*j, token, shortcut))
      {
         ++j;
      }
      if (j == items.end() || followItemLess(token, shortcut, *j))
      {
         j = items.insert(j, new FollowItem(token, shortcut));
         added = true;
      }
      return std::make_pair(j, added);
   }
}

#hdr
#include <basilcc_first_ptr.h>
#include <basilcc_follow_item_ptr_list.h>
#include <basilcc_follow_ptr.h>
#include <basilcc_lex_state.h>
#include <basilcc_priority.h>
#include <basilcc_symbol_ptr.h>
#include <string>
#end

#src
#include <basilcc_first.h>
#include <basilcc_follow_item.h>
#include <basilcc_follow_item_api.h>
#include <basilcc_util.h>
#include <algorithm>
#end
