// maintains all parser tables
namespace basilcc
{
   class BasilCC
   {
   public:
      BasilCC()
      {
         std::fill(m_tables, ARRAY_END(m_tables), (Table*)0);
      }
      ~ BasilCC()
      {
         deleteObjects(m_tables, ARRAY_END(m_tables));
      }

      // intern string, return char *
      inline char const *intern(std::string const &str)
      {
         return m_strings.insert(str).first->c_str();
      }

      // get table T, create if doesn't exist
      template<class T>
      T &getTable()
      {
         TablePtr &table = m_tables[T::TABLE];
         if (!table)
         {
            table = new T(*this);
         }
         return static_cast<T&>(*table);
      }
      // const version
      template<class T>
      T const &getTable() const
      {
         return const_cast<BasilCC&>(*this).getTable<T>();
      }
   private:
      // cached strings
      std::set<std::string> m_strings;
      // parser tables
      TablePtr m_tables[NUM_TABLES];
   }
}

#hdr
#include <basilcc_table_number.h>
#include <basilcc_table_ptr.h>
#include <set>
#include <string>
#end

#src
#include <basilcc_symbol_api.h>
#include <basilcc_table.h>
#include <basilcc_util.h>
#end
