namespace basilcc
{
  class BasilCC;

  // set first sets
  void setFirst (BasilCC & cc)
  {
    // set nulls
    firstNullClosure (cc);
    // tokens
    SymbolPtrVector const & tokens = getTokens (cc);
    for_each (tokens.begin (), tokens.end (), GetTokenFirst ());
    // nonterminals, can skip start symbol
    SymbolPtrVector const & nonterms = getNonTerminals (cc);
    for_each (nonterms.begin () + 1, nonterms.end (), GetNonTerminalFirst (cc));
  }
}

using namespace basilcc;
using namespace std;

namespace
{
  //
  // null case is easy
  //
  
  // first null closure, set first nulls
  void firstNullClosure (BasilCC & cc)
  {
    SymbolPtrVector const & non_term_symbols = getNonTerminals (cc);
    // can skip start symbol, always first
    SymbolPtrVector next_symbols (non_term_symbols.begin () + 1, non_term_symbols.end ());
    SymbolPtrVector symbols;
    symbols.reserve (next_symbols.size ());
    // iterate until number of symbols to be checked stays the same, or no new symbol has null first
    while (next_symbols.size () != symbols.size ())
    {
      symbols.swap (next_symbols);
      next_symbols.clear ();
      for (SymbolPtrVectorConstIter i = symbols.begin (); i != symbols.end (); ++ i)
      {
        SymbolPtr symbol = * i;
        First & first = symbol->getFirst ();
        bool null = false;
        RulePtrVector const & rules = getRules (cc, symbol);
        for (RulePtrVectorConstIter j = rules.begin (); ! null && j != rules.end (); ++ j)
        {
          RulePtr rule = * j;
          null = true;
          RuleSymbolPtrVector const & right_symbols = rule->getRightRuleSymbols ();
          for (RuleSymbolPtrVectorConstIter k = right_symbols.begin (); null && k != right_symbols.end (); ++ k)
          {
            RuleSymbolPtr rule_symbol = * k;
            null = rule_symbol->getSymbol ()->getFirst ().hasNull ();
          }
        }
        if (null)
        {
          first.setNull ();
        }
        else
        {
          next_symbols.push_back (symbol);
        }
      }
    }
  }

  //
  // first items
  //

  // get token first
  void GetTokenFirst (; SymbolPtr symbol) const
  {
    // token has itself as first
    symbol->getFirst ().update (symbol, Priority ());
    symbol->getFirst ().freeze ();
  }

  // get nonterminal first
  void GetNonTerminalFirst (BasilCC & cc; SymbolPtr symbol) const
  {
    FirstClosure ().submit (cc, symbol);
    FirstShiftClosure ().submit (cc, symbol);
    symbol->getFirst ().freeze ();
  }

  //
  // forward path and forward rule used to find first set and shift rules
  //

  // base rule get first and shift priority function
  typedef Priority (BaseRule::* BaseRuleGetPriority) () const;

  // path to forward rule
  class ForwardPath
  {
  public:
    ForwardPath (BaseRulePtrVector const & base_rules)
      : m_base_rules (base_rules)
    {}
    ~ ForwardPath () {}

    // true if path contains rules
    bool includes (BaseRulePtrVector const & base_rules) const
    {
      return std::includes (m_base_rules.begin (), m_base_rules.end (), base_rules.begin (), base_rules.end ());
    }

    // get path priority, sum of all priorities of base rules in path
    Priority getPriority (BaseRuleGetPriority get_priority) const
    {
      Priority p;
      for_each (m_base_rules.begin (), m_base_rules.end (), AddPriority (get_priority, p));
      return p;
    }
  private:
    BaseRulePtrVector m_base_rules;
  }
  typedef ForwardPath * ForwardPathPtr;
  typedef vector <ForwardPathPtr> ForwardPathPtrVector;
  typedef ForwardPathPtrVector::const_iterator ForwardPathPtrVectorConstIter;
  // true if path includes base rules
  bool ForwardPathIncludes (BaseRulePtrVector const & base_rules; ForwardPathPtr path) const
  {
    return path->includes (base_rules);
  }
  // maximum path priority
  void MaxPathPriority (BaseRuleGetPriority get_priority, Priority & p; ForwardPathPtr path) const
  {
    p = max_priority (p, path->getPriority (get_priority));
  }

  // forward base rule
  class ForwardRule
  {
  public:
    ForwardRule (BaseRulePtr base_rule)
      : m_base_rule (base_rule)
    {}
    ~ ForwardRule ()
    {
      deleteObjects (m_paths.begin (), m_paths.end ());
    }
    // get base rule
    inline BaseRulePtr getBaseRule () const
    {
      return m_base_rule;
    }
    // add path, return true if added, false if a path already contains it 
    bool update (BaseRulePtrVector const & base_rules)
    {
      bool changed = false;
      // add to history if base_rules not included in any in history
      ForwardPathPtrVectorConstIter i = find_if (m_paths.begin (), m_paths.end (), ForwardPathIncludes (base_rules));
      if (i == m_paths.end ())
      {
        m_paths.push_back (new ForwardPath (base_rules));
        changed = true;
      }
      return changed;
    }
    // get first priority
    Priority getFirstPriority () const
    {
      return getPriority (& BaseRule::getFirstPriority);
    }
    // get shift priority
    Priority getShiftPriority () const
    {
      return getPriority (& BaseRule::getShiftPriority);
    }
  private:
    // get priority using func ptr
    Priority getPriority (BaseRuleGetPriority get_priority) const
    {
      Priority p;
      for_each (m_paths.begin (), m_paths.end (), MaxPathPriority (get_priority, p));
      return p;
    }
  private:
    // base rule
    BaseRulePtr m_base_rule;
    // paths to forward rule
    ForwardPathPtrVector m_paths;
  }
  typedef ForwardRule * ForwardRulePtr;
  typedef vector <ForwardRulePtr> ForwardRulePtrVector;
  typedef ForwardRulePtrVector::const_iterator ForwardRulePtrVectorConstIter;

  //
  // first closure
  //
  
  class FirstClosure
  {
  public:
    FirstClosure ()
    {}
    ~ FirstClosure ()
    {
      deleteObjects (forward_rules.begin (), forward_rules.end ());
    }

    // set symbol first
    void submit (BasilCC & cc, SymbolPtr symbol)
    {
      // find all forward rules for symbol
      {
        SymbolPtrVector symbols;
        symbols.push_back (symbol);
        for (int i = 0; i < int (symbols.size ()); ++ i)
        {
          SymbolPtr symbol = symbols [i];
          RulePtrVector const & rules = getRules (cc, symbol);
          for (RulePtrVectorConstIter i = rules.begin (); i != rules.end (); ++ i)
          {
            RulePtr rule = * i;
            bool null = true;
            BaseRulePtr base_rule = getBaseRule (cc, rule);
            for (; null && ! base_rule->isReduction (); base_rule = getNextBaseRule (cc, base_rule))
            {
              forward_rules.push_back (new ForwardRule (base_rule));
              SymbolPtr symbol = base_rule->getNextSymbol ();
              if (! symbol->isToken () && find (symbols.begin (), symbols.end (), symbol) == symbols.end ())
              {
                symbols.push_back (symbol);
              }
              null = symbol->getFirst ().hasNull ();
            }
          }
        }
      }
      // udpate paths
      {
        for (ForwardRulePtrVectorConstIter i = forward_rules.begin (); i != forward_rules.end (); ++ i)
        {
          ForwardRulePtr forward_rule = * i;
          BaseRulePtr base_rule = forward_rule->getBaseRule ();
          SymbolPtr symbol = base_rule->getNextSymbol ();
          if (! symbol->isToken () && base_rule->getFirstPriority () != Priority ())
          {
            BaseRulePtrVector base_rules;
            base_rules.push_back (base_rule);
            update (symbol, base_rules);
          }
        }
      }
      First & first = symbol->getFirst ();
      for_each (forward_rules.begin (), forward_rules.end (), UpdateFirst (first));
      first.freeze ();
    }
  private:
    // update paths
    void update (SymbolPtr symbol, BaseRulePtrVector const & base_rules) const
    {
      for (ForwardRulePtrVectorConstIter i = forward_rules.begin (); i != forward_rules.end (); ++ i)
      {
        ForwardRulePtr forward_rule = * i;
        BaseRulePtr base_rule = forward_rule->getBaseRule ();
        RulePtr rule = base_rule->getRule ();
        if (rule->getLeftSymbol () == symbol && forward_rule->update (base_rules))
        {
          SymbolPtr symbol = base_rule->getNextSymbol ();
          if (! symbol->isToken ())
          {
            if (base_rule->getFirstPriority () == Priority () || containsBaseRule (base_rules, base_rule))
            {
              update (symbol, base_rules);
            }
            else
            {
              BaseRulePtrVector nested_base_rules;
              insertBaseRule (base_rules, base_rule, nested_base_rules);
              update (symbol, nested_base_rules);
            }
          }
        }
      }
    }

    // update first from forward rule
    void UpdateFirst (First & first; ForwardRulePtr forward_rule) const
    {
      BaseRulePtr base_rule = forward_rule->getBaseRule ();
      RuleSymbolPtr rule_symbol = base_rule->getNextRuleSymbol ();
      SymbolPtr symbol = rule_symbol->getSymbol ();
      if (symbol->isToken ())
      {
        // add first priority from left rule symbol and next rule symbol
        Priority fp = forward_rule->getFirstPriority ();
        fp += base_rule->getFirstPriority ();
        first.update (symbol, fp);
      }
      // also take lex state from left rule symbol
      first.update (base_rule->getRule ()->getLeftRuleSymbol ()->getLexState ());
      first.update (rule_symbol->getLexState ());
    }
  private:
    ForwardRulePtrVector forward_rules;
  }

  //
  // first shift closure
  //

  class FirstShiftClosure
  {
  public:
    FirstShiftClosure () {}
    ~ FirstShiftClosure ()
    {
      deleteObjects (forward_rules.begin (), forward_rules.end ());
    }

    // submit symbol 
    void submit (BasilCC & cc, SymbolPtr symbol)
    {
      // get forward rules
      {
        SymbolPtrVector symbols;
        symbols.push_back (symbol);
        for (int i = 0; i < int (symbols.size ()); ++ i)
        {
          SymbolPtr symbol = symbols [i];
          RulePtrVector const & rules = getRules (cc, symbol);
          for (RulePtrVectorConstIter i = rules.begin (); i != rules.end (); ++ i)
          {
            RulePtr rule = * i;
            BaseRulePtr base_rule = getBaseRule (cc, rule);
            forward_rules.push_back (new ForwardRule (base_rule));
            if (! base_rule->isReduction ())
            {
              SymbolPtr symbol = base_rule->getNextSymbol ();
              if (! symbol->isToken () && find (symbols.begin (), symbols.end (), symbol) == symbols.end ())
              {
                symbols.push_back (symbol);
              }
            }
          }
        }
      }
      // update
      {
        for (ForwardRulePtrVectorConstIter i = forward_rules.begin (); i != forward_rules.end (); ++ i)
        {
          ForwardRulePtr forward_rule = * i;
          BaseRulePtr base_rule = forward_rule->getBaseRule ();
          if (! base_rule->isReduction ())
          {
            SymbolPtr symbol = base_rule->getNextSymbol ();
            if (! symbol->isToken () && base_rule->getShiftPriority () != Priority ())
            {
              BaseRulePtrVector base_rules;
              base_rules.push_back (base_rule);
              update (symbol, base_rules);
            }
          }
        }
      }
      ShiftRulePtrVector shift_rules;
      shift_rules.reserve (forward_rules.size ());
      transform (forward_rules.begin (), forward_rules.end (), back_inserter (shift_rules), GetFirstShiftRule (cc));
      symbol->getFirst ().setShiftRules (shift_rules);
    }
  private:
    void update (SymbolPtr symbol, BaseRulePtrVector const & base_rules) const
    {
      for (ForwardRulePtrVectorConstIter i = forward_rules.begin (); i != forward_rules.end (); ++ i)
      {
        ForwardRulePtr forward_rule = * i;
        BaseRulePtr base_rule = forward_rule->getBaseRule ();
        RulePtr rule = base_rule->getRule ();
        // might be reduction
        if (rule->getLeftSymbol () == symbol && forward_rule->update (base_rules))
        {
          if (! base_rule->isReduction ())
          {
            SymbolPtr symbol = base_rule->getNextSymbol ();
            if (! symbol->isToken ())
            {
              if (base_rule->getShiftPriority () == Priority () || containsBaseRule (base_rules, base_rule))
              {
                update (symbol, base_rules);
              }
              else
              {
                BaseRulePtrVector nested_base_rules;
                insertBaseRule (base_rules, base_rule, nested_base_rules);
                update (symbol, nested_base_rules);
              }
            }
          }
        }
      }
    }
    // get shift rule from forward rule
    ShiftRulePtr GetFirstShiftRule (BasilCC & cc; ForwardRulePtr forward_rule) const
    {
      BaseRulePtr base_rule = forward_rule->getBaseRule ();
      Priority sp = forward_rule->getShiftPriority ();
      return getShiftRule (cc, base_rule, sp);
    }
  private:
    ForwardRulePtrVector forward_rules;
  }

  //
  // helper functions
  //

  // true if ordered set a contains base rule
  bool containsBaseRule (BaseRulePtrVector const & base_rules, BaseRulePtr base_rule)
  {
    BaseRulePtrVectorConstIter p = lower_bound (base_rules.begin (), base_rules.end (), base_rule, baseRuleLess);
    return p != base_rules.end () && * p == base_rule;
  }

  // insert base rule in set, creating new set
  void insertBaseRule (BaseRulePtrVector const & in_set, BaseRulePtr base_rule, BaseRulePtrVector & out_set)
  {
    bool found = false;
    out_set.reserve (in_set.size () + 1);
    BaseRulePtrVectorConstIter i = in_set.begin ();
    for (; i != in_set.end (); ++ i)
    {
      BaseRulePtr b = * i;
      if (base_rule < b)
      {
        found = (b == base_rule);
        break;
      }
      out_set.push_back (b);
    }
    if (! found)
    {
      out_set.push_back (base_rule);
    }
    out_set.insert (out_set.end (), i, in_set.end ());
  }

  // add base rule priority
  void AddPriority (Priority (BaseRule::* get_priority) () const, Priority & p; BaseRulePtr base_rule) const
  {
    p += (base_rule->*get_priority) ();
  }
}

#src
#include <basilcc_base_rule.h>
#include <basilcc_base_rule_api.h>
#include <basilcc_base_rule_ptr_vector.h>
#include <basilcc_first.h>
#include <basilcc_rule.h>
#include <basilcc_rule_api.h>
#include <basilcc_rule_symbol.h>
#include <basilcc_shift_rule_api.h>
#include <basilcc_symbol.h>
#include <basilcc_symbol_api.h>
#include <basilcc_util.h>
#include <algorithm>
#end
