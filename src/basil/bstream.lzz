namespace basil
{
  struct BinaryWriter (std::ostream & os)
  {
    // numbers
    template <class T>
    BinaryWriter const & operator << (T num) const
    {
      os.write (reinterpret_cast <char const *> (& num), sizeof (T));
      return * this;
    }
    // string
    BinaryWriter const & operator << (std::string const & str) const
    {
      string::size_type length = str.length ();
      (* this) << length;
      os.write (str.data (), length);
      return * this;
    }
    BinaryWriter const & operator << (char const * str) const
    {
      string::size_type length = strlen (str); 
      (* this) << length;
      os.write (str, length);
      return * this;
    }
  };

  struct BinaryReader (std::istream & is)
  {
    // numerical types only
    template <class T>
    BinaryReader const & operator >> (T & num) const
    {
      is.read (reinterpret_cast <char *> (& num), sizeof (T));
      return * this;
    }
    // string
    BinaryReader const & operator >> (std::string & str) const
    {
      string::size_type length;
      (* this) >> length;
      str.resize (length);
      is.read (& str [0], length);
      return * this;
    }
    inline char readChar () const
    {
      char num;
      (* this) >> num;
      return num;
    }
    inline int readInt () const
    {
      int num;
      (* this) >> num;
      return num;
    }
    inline size_t readSize () const
    {
      size_t num;
      (* this) >> num;
      return num;
    }
    inline std::string readString () const
    {
      std::string str;
      (* this) >> str;
      return str;
    }
  };

  // helper functions

  // write string vector
  typedef std::vector <std::string> StringVector;
  void writeStringVector (BinaryWriter & w, StringVector const & strs)
  {
    w << strs.size ();
    for (StringVector::const_iterator i = strs.begin (), endi = strs.end (); i != endi; ++ i)
    {
      w << * i;
    }
  }

  // read string vector
  void readStringVector (BinaryReader & r, StringVector & strs)
  {
    strs.clear ();
    size_t size = readSize (r);
    strs.reserve (size);
    for (size_t i = 0; i < size; ++ i)
    {
      string str;
      r >> str;
      strs.insert (strs.end (), string ())->swap (str);
    }
  }

  // read number vector
  template <class T>
  void readVector (BinaryReader & r, std::vector <T> & nums)
  {
    nums.clear ();
    size_t size = readSize (r);
    nums.reserve (size);
    for (size_t i = 0; i < size; ++ i)
    {
      T t;
      r >> t;
      nums.push_back (t);
    }
  }

  // read size_t
  inline size_t readSize (BinaryReader & r)
  {
    size_t num;
    r >> num;
    return num;
  }
}

using namespace std;

#hdr
#include <iostream>
#include <stddef.h>
#include <string>
#include <vector>
#end

#src
#include <string.h>
#end
