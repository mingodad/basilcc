namespace basil
{
  // lua environment
  class LuaEnv
  {
  public:
    LuaEnv (std::string const & scripts_dir)
      : L (luaL_newstate ()), m_scripts_dir (scripts_dir)
    {
      luaL_openlibs (L);
      // package.path=scripts_dir/?.lua
      lua_getglobal (L, "package");
      lua_pushstring (L, path ("?.lua").c_str ()); 
      lua_setfield (L, -2, "path");
      lua_pop (L, 1);
      // leave error handler on the stack in position 1
      lua_pushcfunction (L, error_handler);
      assert (lua_gettop (L) == 1);

      registerLoc (L);
      Parser::registerToken (L);
    }
    ~ LuaEnv ()
    {
      close ();
    }

    // close lua state
    void close ()
    {
      if (L)
      {
        lua_close (L);
        L = 0;
      }
    }
    // get filename prefixed with scripts dir
    std::string path (std::string const & filename)
    {
      return join (m_scripts_dir, filename);
    }

    // lua state
    lua_State * L;

  private:
    std::string m_scripts_dir;
  }
}

namespace
{
  int error_handler (lua_State * L)
  {
    char const * msg = luaL_checkstring (L, 1);
    luaL_traceback (L, L, msg, 1);
    return 1;
  }

  // join directory with filename
  std::string join (std::string const & dirname, std::string const & filename)
  {
    std::string result = dirname;
    size_t len = result.length ();
    if (len > 0)
    {
#ifdef WINDOWS
      if (! (result [len - 1] == '/' || result [len - 1] == '\\'))
      {
        result += '\\';
      }
#else
      if (! (result [len - 1] == '/'))
      {
        result += '/';
       }
#endif
    }
    result += filename;
    return result;
  }
}

#hdr
#include <string>
#include <lua.hpp>
#end

#src
#include <assert.h>
#include <basil/loc_lua.h>

// todo: move registerToken out of parser
#include <basil/parser.h>
#end
