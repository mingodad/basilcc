namespace basil
{
  class Lexer;

  // parser application -- AppEnv?
  class App : public LuaEnv
  {
  public:
    // fsm and app filenames relative to scripts_dir
    App (std::string const & scripts_dir, std::string const & fsm_filename, TokenNumberPtr beg, TokenNumberPtr end, std::string const & app_filename)
      : LuaEnv (scripts_dir), fsm (path (fsm_filename), beg, end), app_mt (LUA_NOREF), node_mts (LUA_NOREF)
    {
      registerLoc (L);
      Parser::registerToken (L);
      Loader loader (L, fsm.getNodes ());
      app_mt = loader.load (path (app_filename), node_mts);
    }

    // keywords for lexer 
    StringIntVector const & getKeywords () const
    {
      return fsm.getKeywords ();
    }

    // create new application instance and run it
    void run (Lexer & lexer, Logger & logger)
    {
      Runner runner (L);
      runner.run (fsm, app_mt, node_mts, lexer, logger);
    }

  private:
    // parser finite state machine
    FSM fsm;
    // app metatable
    int app_mt;
    // array of node metatables 
    int node_mts;
  }
}

using namespace basil;
using namespace std;

namespace
{
  typedef std::vector <string> StringVector;
  typedef StringVector::const_iterator StringVectorConstIter;
  typedef std::vector <int> IntVector;
  typedef IntVector::const_iterator IntVectorConstIter;

  // app loader
  class Loader
  {
  public:
    Loader (lua_State * L, StringVector const & nodes)
      : L (L), nodes (nodes), node_mts (nodes.size (), LUA_NOREF), app_mt (LUA_NOREF)
    {}
    ~ Loader ()
    {
      // unregister funcs
      for (luaL_Reg const * i = loader_funcs, * endi = ARRAY_END (loader_funcs); i != endi; ++ i)
      {
        lua_pushnil (L);
        lua_setglobal (L, i->name);
      }
    }

    // run loader, parse app filename, set node metatable array and return app metatable
    int load (string const & filename, int & node_mts_array)
    {
      // register loader functions
      for (luaL_Reg const * i = loader_funcs, * endi = ARRAY_END (loader_funcs); i != endi; ++ i)
      {
        lua_pushlightuserdata (L, this);
        lua_pushcclosure (L, i->func, 1);
        lua_setglobal (L, i->name);
      }
      // parse application
      if (luaL_dofile (L, filename.c_str ()))
      {
        string errmsg = lua_tostring (L, -1);
        lua_pop (L, 1);
        throw BasilError (errmsg);
      }
      // make sure all nodes defined
      {
        StringVectorConstIter j = nodes.begin ();
        for (IntVectorConstIter i = node_mts.begin (), endi = node_mts.end (); i != endi; ++ i, ++ j)
        {
          if (* i == LUA_NOREF)
          {
            throw BasilError (Message ("node % not defined") << * j);
          }
        }
      }
      // push all node metatables into array in node order (or just use the registry??)
      int n = nodes.size ();
      lua_createtable (L, n, 0);
      int j = 1;
      for (IntVectorConstIter i = node_mts.begin (), endi = node_mts.end (); i != endi; ++ i, ++ j)
      {
        int ref = * i;
        lua_rawgeti (L, LUA_REGISTRYINDEX, ref);
        lua_rawseti (L, -2, j);
        luaL_unref  (L, LUA_REGISTRYINDEX, ref);
      }        
      // set reference to array and return app metatable
      node_mts_array = luaL_ref (L, LUA_REGISTRYINDEX);
      return app_mt;
    }          

    //
    // lua callbacks
    //
    
    int onNode ()
    {
      char const * name = luaL_checkstring (L, 1);
      {
        try
        {
          StringVectorConstIter i = lower_bound (nodes.begin (), nodes.end (), name);
          if (i == nodes.end () || * i != name)
          {
            throw BasilError (Message ("% is not a valid node name") << name);
          }
          int & node_mt = node_mts [i - nodes.begin ()];
          if (node_mt != LUA_NOREF)
          {
            throw BasilError (Message ("% is already defined") << name);
          }
          node_mt = pushMetatable ();
          return 1;
        }
        catch (exception const & e)
        {
          errmsg = e.what ();
        }
        catch (...)
        {
          errmsg = "unknown exception";
        }
      }
      return luaL_error (L, errmsg.c_str ());
    }

    int onApplication ()
    {
      {
        try
        {
          if (app_mt != LUA_NOREF)
          {
            throw BasilError ("application already defined");
          }
          app_mt = pushMetatable ();
          return 1;
        }
        catch (exception const & e)
        {
          errmsg = e.what ();
        }
        catch (...)
        {
          errmsg = "unknown exception";
        }
      }
      return luaL_error (L, errmsg.c_str ());
    }

  private:
    // push new metatable on stack and also return reference to it
    int pushMetatable ()
    {
      lua_newtable (L);
      lua_pushvalue (L, -1);
      lua_setfield (L, -2, "__index");
      lua_pushvalue (L, -1);
      return luaL_ref (L, LUA_REGISTRYINDEX);
    }

  private:
    lua_State * L;
    // FSM nodes indexed by name
    StringVector const & nodes;
    // node metatables indexed by node
    IntVector node_mts;
    // app metatable
    int app_mt;
    // buffer for lua error message
    string errmsg;
  }

  // exported loader functions
  int on_node (lua_State * L)
  {
    return ((Loader *) lua_touserdata (L, lua_upvalueindex (1)))->onNode ();
  }    
  int on_application (lua_State * L)
  {
    return ((Loader *) lua_touserdata (L, lua_upvalueindex (1)))->onApplication ();
  }
  luaL_Reg loader_funcs [] =
  {
    { "node", on_node },
    { "application", on_application },
  };

  // app runner
  class Runner
  {
  public:
    Runner (lua_State * L)
      : L (L), app_ref (LUA_NOREF)
    {}
    ~ Runner ()
    {
      luaL_unref (L, LUA_REGISTRYINDEX, app_ref);
    }

    // create new instance of parser app and run it
    void run (FSM & fsm, int app_mt, int node_mts, Lexer & lexer, Logger & logger)
    {
      app_ref = newInstance (app_mt);
      Parser (L, fsm, node_mts, lexer, app_ref, logger).parse (0);
      // call app finalize method if no errors
      if (app_ref != LUA_NOREF && ! logger.hasError ())
      {
        lua_rawgeti (L, LUA_REGISTRYINDEX, app_ref);
        lua_getfield (L, -1, "onTree"); // finalize
        if (lua_isnil (L, -1))
        {
          lua_pop (L, 2);
        }
        else
        {
          lua_rotate (L, -2, 1);
          if (lua_pcall (L, 1, 0, 1) != LUA_OK)
          {
            string errmsg = lua_tostring (L, -1);
            lua_pop (L, 1);
            throw BasilError (errmsg);
          }
        }
      }
    }

  private:
    // create and return new parser app instance
    int newInstance (int app_mt)
    {
      if (app_mt == LUA_NOREF)
      {
        return LUA_NOREF;
      }
      // create instance, set class as metatable
      lua_newtable (L);
      lua_rawgeti (L, LUA_REGISTRYINDEX, app_mt);
      lua_setmetatable (L, -2);
      // save copy
      lua_pushvalue (L, -1);
      // call init function if exits
      lua_getfield (L, -1, "init");
      if (lua_isnil (L, -1))
      {
        lua_pop (L, 2);
      }
      else
      {
        // init function first then instance
        lua_rotate (L, -2, 1);
        // call it, don't expect any return argument
        if (lua_pcall (L, 1, 0, 1) != LUA_OK)
        {
          string errmsg = lua_tostring (L, -1);
          lua_pop (L, 1);
          throw BasilError (errmsg);
        }
      }
      return luaL_ref (L, LUA_REGISTRYINDEX);
    }

  private:
    lua_State * L;
    // app instance
    int app_ref;
  }
}

#hdr
#include <basil/fsm.h>
#include <basil/logger.h>
#include <basil/lua_env.h>
#include <string>
#end

#src
#include <basil/error.h>
#include <basil/loc_lua.h>
#include <basil/message.h>
#include <basil/parser.h>
#include <algorithm>
#include <map>

#define ARRAY_SIZE(X) (sizeof (X) / sizeof (X [0]))
#define ARRAY_END(X) (X + ARRAY_SIZE(X))
#end
