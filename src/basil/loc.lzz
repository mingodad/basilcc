namespace basil
{
  // file location
  class Loc
  {
  public:
    Loc ()
      : filename_ (0), line_ (0), column_ (1)
    {}
    Loc (char const * filename, int line, int column)
      : filename_ (filename), fullname_ (filename), line_ (line), column_ (column)
    {}
    Loc (char const * filename, char const * fullname, int line, int column)
      : filename_ (filename), fullname_ (fullname), line_ (line), column_ (column)
    {}
    ~ Loc ()
    {}
    // true if set location
    inline bool isSet () const
    {
      return filename_ != 0;
    }
    // get filename
    inline char const * getFilename () const
    {
      return filename_;
    }
    // get fullname
    inline char const * getFullname () const
    {
      return fullname_;
    }
    // get line
    inline int getLine () const
    {
      return line_;
    }
    // get column
    inline int getColumn () const
    {
      return column_;
    }
  private:
    // file name
    char const * filename_; 
    char const * fullname_; 
    // line
    int line_;
    // column
    int column_;
  }

  // Loc a < b
  bool operator < (Loc const & a, Loc const & b)
  {
    bool result = false;
    if (a.getFilename () == b.getFilename ())
    {
      if (a.getLine () < b.getLine ())
      {
        result = true;
      }
      else if (a.getLine () == b.getLine ())
      {
        result = a.getColumn () < b.getColumn ();
      }
    }
    else
    {
      result = a.getFilename () < b.getFilename ();
    }
    return result;
  }

  // loc to string
  std::ostream & operator << (std::ostream & os, Loc const & loc)
  {
    if (loc.isSet ())
    {
      os << loc.getFilename () << ':' << loc.getLine () << ':' <<  loc.getColumn () << ':';
    }
    return os;
  }
  std::string locToString (Loc const & loc)
  {
    ostringstream ss;
    ss << loc;
    return ss.str ();
  }
}

using namespace std;

#hdr
#include <iosfwd>
#include <string>
#end

#src
#include <sstream>
#end
